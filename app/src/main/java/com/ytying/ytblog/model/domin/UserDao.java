package com.ytying.ytblog.model.domin;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FunId = new Property(0, String.class, "funId", true, "FUN_ID");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property CreateTime = new Property(3, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Designer = new Property(4, Integer.class, "designer", false, "DESIGNER");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property PhoneNumber = new Property(6, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property QqNumber = new Property(7, String.class, "qqNumber", false, "QQ_NUMBER");
        public final static Property Motto = new Property(8, String.class, "motto", false, "MOTTO");
        public final static Property Province = new Property(9, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(10, String.class, "city", false, "CITY");
        public final static Property HeadImage = new Property(11, String.class, "headImage", false, "HEAD_IMAGE");
        public final static Property BackImage = new Property(12, String.class, "backImage", false, "BACK_IMAGE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'FUN_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: funId
                "'EMAIL' TEXT," + // 1: email
                "'NICKNAME' TEXT," + // 2: nickname
                "'CREATE_TIME' TEXT," + // 3: createTime
                "'DESIGNER' INTEGER," + // 4: designer
                "'SEX' TEXT," + // 5: sex
                "'PHONE_NUMBER' TEXT," + // 6: phoneNumber
                "'QQ_NUMBER' TEXT," + // 7: qqNumber
                "'MOTTO' TEXT," + // 8: motto
                "'PROVINCE' TEXT," + // 9: province
                "'CITY' TEXT," + // 10: city
                "'HEAD_IMAGE' TEXT," + // 11: headImage
                "'BACK_IMAGE' TEXT);"); // 12: backImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String funId = entity.getFunId();
        if (funId != null) {
            stmt.bindString(1, funId);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(4, createTime);
        }
 
        Integer designer = entity.getDesigner();
        if (designer != null) {
            stmt.bindLong(5, designer);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(7, phoneNumber);
        }
 
        String qqNumber = entity.getQqNumber();
        if (qqNumber != null) {
            stmt.bindString(8, qqNumber);
        }
 
        String motto = entity.getMotto();
        if (motto != null) {
            stmt.bindString(9, motto);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(10, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(11, city);
        }
 
        String headImage = entity.getHeadImage();
        if (headImage != null) {
            stmt.bindString(12, headImage);
        }
 
        String backImage = entity.getBackImage();
        if (backImage != null) {
            stmt.bindString(13, backImage);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // funId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // designer
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phoneNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qqNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // motto
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // province
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // city
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // headImage
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // backImage
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setFunId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDesigner(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoneNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQqNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMotto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProvince(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHeadImage(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBackImage(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getFunId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getFunId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
